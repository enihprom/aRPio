with model_specific; use model_specific;
with interfaces; use interfaces;
with interfaces.c; use interfaces.c;

-- broadcomm 2835 GPIO
-- mixed thick/thin binding 
-- cherrypicking and tightrope walking
-- 	overhead avoidance by type-safety vs. overhead ;)

package gpio is

	pragma linker_options("/usr/local/lib/libbcm2835.a");

	
	-- types 
	subtype   pin_control_index  is natural range 0 .. 9;
	type      port_type      	  is access unsigned_32;
	type      fsel_reg_type      is array (pin_control_index)
		                             of     pin_mode;
	type      fsel_regs_type     is array 
		(pinset10_control_index, pin_control_index) --?
		of     pin_mode;

	A_W   : constant := system.word_size/system.storage_unit;
	M_b   : constant := 3;

	subtype   pin_mask           is unsigned_32;
	type      pin_mode           is range 0..7;
	for       pin_mode'size      use M_b;

	subtype      portaddr_type      is system.address;

	subtype   ctl_word_index     is natural range 0 .. 9;
	type      ctl_word_type      is array (ctl_word_index)
			of     pin_mode;

	subtype   ctl_block_index    is natural range 0 .. 5;
	type      ctl_block_type     is array
			(ctl_block_index, ctl_word_index)
			of     pin_mode;

	subtype   pin_index          is natural range 0 .. 53;
	type      bwm_map_pair       is
		record
			block : ctl_block_type;
			word  : ctl_word_type;
		end record;
	type      bwm_map_array      is array
			(pin_index)	of bwm_map_pair;

	type      ctl_ref            is access all pin_mode;
	type      ctl_ref_array      is array (pin_index)
			of ctl_ref;

	subtype   vctl_bit_index     is natural 
			range 0 .. (ctl_block_index'last+1-ctl_block_index'first)*32;
	type      vctl_array          is array (vctl_bit_index)
			of boolean;

	pin_mode_input  : pin_mode := 2#000#;
	pin_mode_output : pin_mode := 2#001#;
	pin_mode_alt_0  : pin_mode := 2#100#;
	pin_mode_alt_1  : pin_mode := 2#101#;
	pin_mode_alt_2  : pin_mode := 2#110#;
	pin_mode_alt_3  : pin_mode := 2#111#;
	pin_mode_alt_4  : pin_mode := 2#011#;
	pin_mode_alt_5  : pin_mode := 2#010#;

	type control_register is
		record
			pin00 :  pin_mode := pin_mode_input;
			pin01 :  pin_mode := pin_mode_input;
			pin02 :  pin_mode := pin_mode_input;
			pin03 :  pin_mode := pin_mode_input;
			pin04 :  pin_mode := pin_mode_input;
			pin05 :  pin_mode := pin_mode_input;
			pin06 :  pin_mode := pin_mode_input;
			pin07 :  pin_mode := pin_mode_input;
			pin08 :  pin_mode := pin_mode_input;
			pin09 :  pin_mode := pin_mode_input;
			pin10 :  pin_mode := pin_mode_input;
			pin11 :  pin_mode := pin_mode_input;
			pin12 :  pin_mode := pin_mode_input;
			pin13 :  pin_mode := pin_mode_input;
			pin14 :  pin_mode := pin_mode_input;
			pin15 :  pin_mode := pin_mode_input;
			pin16 :  pin_mode := pin_mode_input;
			pin17 :  pin_mode := pin_mode_input;
			pin18 :  pin_mode := pin_mode_input;
			pin19 :  pin_mode := pin_mode_input;
			pin20 :  pin_mode := pin_mode_input;
			pin21 :  pin_mode := pin_mode_input;
			pin22 :  pin_mode := pin_mode_input;
			pin23 :  pin_mode := pin_mode_input;
			pin24 :  pin_mode := pin_mode_input;
			pin25 :  pin_mode := pin_mode_input;
			pin26 :  pin_mode := pin_mode_input;
			pin27 :  pin_mode := pin_mode_input;
			pin28 :  pin_mode := pin_mode_input;
			pin29 :  pin_mode := pin_mode_input;
			pin30 :  pin_mode := pin_mode_input;
			pin31 :  pin_mode := pin_mode_input;
			pin32 :  pin_mode := pin_mode_input;
			pin33 :  pin_mode := pin_mode_input;
			pin34 :  pin_mode := pin_mode_input;
			pin35 :  pin_mode := pin_mode_input;
			pin36 :  pin_mode := pin_mode_input;
			pin37 :  pin_mode := pin_mode_input;
			pin38 :  pin_mode := pin_mode_input;
			pin39 :  pin_mode := pin_mode_input;
			pin40 :  pin_mode := pin_mode_input;
			pin41 :  pin_mode := pin_mode_input;
			pin42 :  pin_mode := pin_mode_input;
			pin43 :  pin_mode := pin_mode_input;
			pin44 :  pin_mode := pin_mode_input;
			pin45 :  pin_mode := pin_mode_input;
			pin46 :  pin_mode := pin_mode_input;
			pin47 :  pin_mode := pin_mode_input;
			pin48 :  pin_mode := pin_mode_input;
			pin49 :  pin_mode := pin_mode_input;
			pin50 :  pin_mode := pin_mode_input;
			pin51 :  pin_mode := pin_mode_input;
			pin52 :  pin_mode := pin_mode_input;
			pin53 :  pin_mode := pin_mode_input;
		end record;

	for control_register use
		record
			-- pin_n @ n*addr-words range n*mode-bits .. (") + mode-bits
			pin00  at 0*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin01  at 0*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin02  at 0*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin03  at 0*A_W range 3*M_b .. 3*M_b + M_b - 1;
			pin04  at 0*A_W range 4*M_b .. 4*M_b + M_b - 1;
			pin05  at 0*A_W range 5*M_b .. 5*M_b + M_b - 1;
			pin06  at 0*A_W range 6*M_b .. 6*M_b + M_b - 1;
			pin07  at 0*A_W range 7*M_b .. 7*M_b + M_b - 1;
			pin08  at 0*A_W range 8*M_b .. 8*M_b + M_b - 1;
			pin09  at 0*A_W range 9*M_b .. 9*M_b + M_b - 1;
			pin10  at 1*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin11  at 1*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin12  at 1*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin13  at 1*A_W range 3*M_b .. 3*M_b + M_b - 1;
			pin14  at 1*A_W range 4*M_b .. 4*M_b + M_b - 1;
			pin15  at 1*A_W range 5*M_b .. 5*M_b + M_b - 1;
			pin16  at 1*A_W range 6*M_b .. 6*M_b + M_b - 1;
			pin17  at 1*A_W range 7*M_b .. 7*M_b + M_b - 1;
			pin18  at 1*A_W range 8*M_b .. 8*M_b + M_b - 1;
			pin19  at 1*A_W range 9*M_b .. 9*M_b + M_b - 1;
			pin20  at 2*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin21  at 2*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin22  at 2*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin23  at 2*A_W range 3*M_b .. 3*M_b + M_b - 1;
			pin24  at 2*A_W range 4*M_b .. 4*M_b + M_b - 1;
			pin25  at 2*A_W range 5*M_b .. 5*M_b + M_b - 1;
			pin26  at 2*A_W range 6*M_b .. 6*M_b + M_b - 1;
			pin27  at 2*A_W range 7*M_b .. 7*M_b + M_b - 1;
			pin28  at 2*A_W range 8*M_b .. 8*M_b + M_b - 1;
			pin29  at 2*A_W range 9*M_b .. 9*M_b + M_b - 1;
			pin30  at 3*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin31  at 3*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin32  at 3*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin33  at 3*A_W range 3*M_b .. 3*M_b + M_b - 1;
			pin34  at 3*A_W range 4*M_b .. 4*M_b + M_b - 1;
			pin35  at 3*A_W range 5*M_b .. 5*M_b + M_b - 1;
			pin36  at 3*A_W range 6*M_b .. 6*M_b + M_b - 1;
			pin37  at 3*A_W range 7*M_b .. 7*M_b + M_b - 1;
			pin38  at 3*A_W range 8*M_b .. 8*M_b + M_b - 1;
			pin39  at 3*A_W range 9*M_b .. 9*M_b + M_b - 1;
			pin40  at 4*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin41  at 4*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin42  at 4*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin43  at 4*A_W range 3*M_b .. 3*M_b + M_b - 1;
			pin44  at 4*A_W range 4*M_b .. 4*M_b + M_b - 1;
			pin45  at 4*A_W range 5*M_b .. 5*M_b + M_b - 1;
			pin46  at 4*A_W range 6*M_b .. 6*M_b + M_b - 1;
			pin47  at 4*A_W range 7*M_b .. 7*M_b + M_b - 1;
			pin48  at 4*A_W range 8*M_b .. 8*M_b + M_b - 1;
			pin49  at 4*A_W range 9*M_b .. 9*M_b + M_b - 1;
			pin50  at 5*A_W range 0*M_b .. 0*M_b + M_b - 1;
			pin51  at 5*A_W range 1*M_b .. 1*M_b + M_b - 1;
			pin52  at 5*A_W range 2*M_b .. 2*M_b + M_b - 1;
			pin53  at 5*A_W range 3*M_b .. 3*M_b + M_b - 1;
		end record;          
	
	use type interfaces.c.int;


	-- constants
	HIGH : constant := 16#1#;  -- pin HIGH  =  true   =  3.3 V
	LOW  : constant := 16#0#;  -- pin LOW   =  false  =    0 V
	BCM2835_CORE_CLK_HZ : constant := 250000000; --< 250 MHz
	BCM2835_PERI_BASE   : constant := 16#20000000#;
	BCM2835_ST_BASE     : constant := (BCM2835_PERI_BASE + 16#3000#);
	BCM2835_GPIO_PADS   : constant := (BCM2835_PERI_BASE + 16#100000#);
	BCM2835_CLOCK_BASE  : constant := (BCM2835_PERI_BASE + 16#101000#);
	BCM2835_GPIO_BASE   : constant := (BCM2835_PERI_BASE + 16#200000#);
	BCM2835_SPI0_BASE   : constant := (BCM2835_PERI_BASE + 16#204000#);
	BCM2835_BSC0_BASE   : constant := (BCM2835_PERI_BASE + 16#205000#);
	BCM2835_GPIO_PWM    : constant := (BCM2835_PERI_BASE + 16#20C000#);
	BCM2835_BSC1_BASE   : constant := (BCM2835_PERI_BASE + 16#804000#);

	BCM2835_GPFSEL0     : constant := 16#0000#;
	BCM2835_GPFSEL1     : constant := 16#0004#;
	BCM2835_GPFSEL2     : constant := 16#0008#;
	BCM2835_GPFSEL3     : constant := 16#000c#;
	BCM2835_GPFSEL4     : constant := 16#0010#;
	BCM2835_GPFSEL5     : constant := 16#0014#;

	BCM2835_GPSET0      : constant := 16#001c#;
	BCM2835_GPCLR0      : constant := 16#0028#;
	BCM2835_GPSET0_by4  : constant := 16#001c#/4;
	BCM2835_GPCLR0_by4  : constant := 16#0028#/4;

	pin_mode_input  : constant pin_mode := 2#000#;
	pin_mode_output : constant pin_mode := 2#001#;
	pin_mode_alt_0  : constant pin_mode := 2#100#;
	pin_mode_alt_1  : constant pin_mode := 2#101#;
	pin_mode_alt_2  : constant pin_mode := 2#110#;
	pin_mode_alt_3  : constant pin_mode := 2#111#;
	pin_mode_alt_4  : constant pin_mode := 2#011#;
	pin_mode_alt_5  : constant pin_mode := 2#010#;


	-- mapped addresses
	bcm2835_gpio  :  system.address;
	for bcm2835_gpio'address use system.to_address(mapped.bcm2835_gpio_base);

	bcm2835_pwm   :  system.address;
	bcm2835_clk   :  system.address;
	bcm2835_pads  :  system.address;
	bcm2835_spi0  :  system.address;
	bcm2835_bsc0  :  system.address;
	bcm2835_bsc1  :  system.address;
	bcm2835_st    :  system.address;

	-- set(pin :..) is
	-- 	
	--    for bcm2835_gpio'address use mapped_bcm2835_gpio_gp;
	-- begin
	-- ...
	--
	-- fsel(pin : pin_control_index; mode : ...) is
	-- 	fsel_reg : fsel_reg_type := to_fsel_reg(pin/3);
	-- 	for fsel_reg'address use ...
	-- begin
	-- 	fsel_reg(pin) := mode;
	-- end
	-- ...
	-- or even
	-- ...
	-- fsel(pin : pin_index; mode : ...) is
	-- 	fsel_regs : fsel_regs_type;
	-- 	for fsel_regs'address use ...
	-- begin
	-- 	fsel_regs(pin) := mode;
	-- end
	-- }
	
	-- status variables
	debug_mode            : boolean := false;

	-- native versions
	function init return system.address;
	procedure close;
	procedure set_debug(debug : in boolean := true);
	procedure set_mode(pi : in pin_index; mode : pin_mode); --fsel
	procedure set(pi : in pin_index);
	procedure clr(pi : in pin_index);
	procedure mset(pm : in pin_mask);
	procedure mclr(pm : in pin_mask);
	function get(pi : in pin_index) return boolean;
	
	pragma inline(init);
	pragma inline(close);
	pragma inline(set_debug);
	pragma inline(set_mode);
	pragma inline(set);
	pragma inline(clr);
	pragma inline(mset);
	pragma inline(mclr);
	pragma inline(get);
	

	--todo encapsulate in protected type
	-- procedure peri_write (pa    : in paddr_type;	value : in unsigned_32);
	-- function  peri_read  (pa    : in paddr_type) return unsigned_32;

	gpio_error : exception;


	procedure bcm2835_peri_set_bits(
		paddr         :     portaddr_type;
		value, mask   : in     unsigned_32);
	pragma import(c, bcm2835_peri_set_bits);

	procedure bcm2835_peri_read(
		paddr         :     portaddr_type);
	pragma import(c, bcm2835_peri_read);

	procedure bcm2835_peri_write(
		paddr         :     portaddr_type;
		value         : in     unsigned_32);
	pragma import(c, bcm2835_peri_write);

	procedure bcm2835_peri_read_nb(
		paddr         :     portaddr_type);
	pragma import(c, bcm2835_peri_read_nb);

	procedure bcm2835_peri_write_nb(
		paddr         :     portaddr_type;
		value         : in     unsigned_32);
	pragma import(c, bcm2835_peri_write_nb);


	function bcm2835_gpio_eds(pin : in unsigned_8) return unsigned_8;
	pragma import(c, bcm2835_gpio_eds);

	procedure bcm2835_gpio_set_eds(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_set_eds);

	procedure bcm2835_gpio_ren(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_ren);

	procedure bcm2835_gpio_clr_ren(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_ren);

	procedure bcm2835_gpio_fen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_fen);

	procedure bcm2835_gpio_clr_fen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_fen);

	procedure bcm2835_gpio_hen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_hen);

	procedure bcm2835_gpio_clr_hen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_hen);

	procedure bcm2835_gpio_len(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_len);

	procedure bcm2835_gpio_clr_len(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_len);

	procedure bcm2835_gpio_aren(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_aren);

	procedure bcm2835_gpio_clr_aren(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_aren);

	procedure bcm2835_gpio_afen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_afen);

	procedure bcm2835_gpio_clr_afen(pin : in unsigned_8);
	pragma import(c, bcm2835_gpio_clr_afen);

	procedure bcm2835_gpio_pud(pud : in unsigned_8);
	pragma import(c, bcm2835_gpio_pud);

	procedure bcm2835_gpio_pudclk(pud : in unsigned_8);
	pragma import(c, bcm2835_gpio_pudclk);

	function bcm2835_gpio_pad(group : in unsigned_8) return unsigned_32;	
	pragma import(c, bcm2835_gpio_pad);

	procedure bcm2835_gpio_set_pad(
		group : in unsigned_8; control : in unsigned_32);
	pragma import(c, bcm2835_gpio_set_pad);



	
end gpio;

